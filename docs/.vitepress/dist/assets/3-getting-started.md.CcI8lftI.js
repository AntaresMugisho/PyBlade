import{_ as a,c as e,a0 as i,o as t}from"./chunks/framework.CGHvQLJz.js";const k=JSON.parse('{"title":"PyBlade Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"3-getting-started.md","filePath":"3-getting-started.md"}'),n={name:"3-getting-started.md"};function l(p,s,o,r,h,d){return t(),e("div",null,s[0]||(s[0]=[i(`<h1 id="pyblade-documentation" tabindex="-1">PyBlade Documentation <a class="header-anchor" href="#pyblade-documentation" aria-label="Permalink to &quot;PyBlade Documentation&quot;">​</a></h1><hr><h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>To install PyBlade, simply use <code>pip</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyblade</span></span></code></pre></div><hr><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><h3 id="django-configuration" tabindex="-1">Django Configuration <a class="header-anchor" href="#django-configuration" aria-label="Permalink to &quot;Django Configuration&quot;">​</a></h3><p>To use <strong>PyBlade</strong> with Django, first ensure your Django project is correctly set up. If not, please refer to the <a href="https://docs.djangoproject.com/en/stable/" target="_blank" rel="noreferrer">Django documentation</a> for instructions.</p><h3 id="_1-install-pyblade" tabindex="-1">1. Install PyBlade <a class="header-anchor" href="#_1-install-pyblade" aria-label="Permalink to &quot;1. Install PyBlade&quot;">​</a></h3><p>Install PyBlade using pip:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyblade</span></span></code></pre></div><h3 id="_2-configure-pyblade-in-django-settings" tabindex="-1">2. Configure PyBlade in Django Settings <a class="header-anchor" href="#_2-configure-pyblade-in-django-settings" aria-label="Permalink to &quot;2. Configure PyBlade in Django Settings&quot;">​</a></h3><p>In <code>settings.py</code>, add PyBlade as a template backend to enable Django to recognize and process PyBlade as the default template engine.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># settings.py</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TEMPLATES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;BACKEND&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pyblade.backends.DjangoPyBlade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Specify DjangoPyBlade as the backend</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;DIRS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BASE_DIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.joinpath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)],     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Path to your templates directory</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;APP_DIRS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Enables template loading for each app</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # Optional configurations for pyblade</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="_3-rendering-pyblade-templates-in-django-views" tabindex="-1">3. Rendering PyBlade Templates in Django Views <a class="header-anchor" href="#_3-rendering-pyblade-templates-in-django-views" aria-label="Permalink to &quot;3. Rendering PyBlade Templates in Django Views&quot;">​</a></h3><p>In Django views, PyBlade templates should be referenced without the <code>.pyblade</code> extension, and folders should use dots <code>.</code> instead of slashes <code>/</code> for separation. This is consistent with PyBlade’s template loading conventions.</p><p>For example, given the structure:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_project/</span></span>
<span class="line"><span>├── my_app/</span></span>
<span class="line"><span>│   ├── views.py                # Django views file</span></span>
<span class="line"><span>│   ├── models.py               # Django models file</span></span>
<span class="line"><span>│   └── templates/</span></span>
<span class="line"><span>│       └── my_app/             # App-specific folder for templates</span></span>
<span class="line"><span>│           ├── index.pyblade   # Template for a view in \`my_app\`</span></span>
<span class="line"><span>│           └── about.pyblade   # Other template</span></span>
<span class="line"><span>└── settings.py</span></span></code></pre></div><p>To reference <code>index.pyblade</code> within <code>my_app/templates/my_app/</code>, use the path <code>&quot;my_app.index&quot;</code> in your Django view, as follows:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># views.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.shortcuts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> home_view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Welcome to PyBlade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render(request, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_app.index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context)</span></span></code></pre></div><p>This dot notation approach provides a clean way to reference templates across folders and is timeless consuming.</p><hr><h2 id="flask-configuration" tabindex="-1">Flask Configuration <a class="header-anchor" href="#flask-configuration" aria-label="Permalink to &quot;Flask Configuration&quot;">​</a></h2><p>PyBlade can also be easily configured for Flask, requiring only minimal setup.</p><h3 id="_1-install-pyblade-1" tabindex="-1">1. Install PyBlade <a class="header-anchor" href="#_1-install-pyblade-1" aria-label="Permalink to &quot;1. Install PyBlade&quot;">​</a></h3><p>Install PyBlade as follows:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyblade</span></span></code></pre></div><h3 id="_2-organize-your-template-files" tabindex="-1">2. Organize Your Template Files <a class="header-anchor" href="#_2-organize-your-template-files" aria-label="Permalink to &quot;2. Organize Your Template Files&quot;">​</a></h3><p>Within your Flask project, create a <code>templates</code> folder if it doesn’t already exist, and place your <code>.pyblade</code> templates there:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_flask_project/</span></span>
<span class="line"><span>├── app.py                  # Main Flask application file</span></span>
<span class="line"><span>└── templates/</span></span>
<span class="line"><span>    ├── index.pyblade       # PyBlade template file</span></span>
<span class="line"><span>    └── about.pyblade        # Optional base layout template</span></span></code></pre></div><p>It is important to exactly name this folder <code>templates</code> in Flask.</p><h3 id="_3-rendering-pyblade-templates-in-flask" tabindex="-1">3. Rendering PyBlade Templates in Flask <a class="header-anchor" href="#_3-rendering-pyblade-templates-in-flask" aria-label="Permalink to &quot;3. Rendering PyBlade Templates in Flask&quot;">​</a></h3><p>In Flask, you can render PyBlade templates using <code>pyblade.render</code>. Like in Django, reference the file without the <code>.pyblade</code> extension.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># app.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pyblade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Welcome to PyBlade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}})</span></span></code></pre></div><hr><h2 id="editor-support" tabindex="-1">Editor Support <a class="header-anchor" href="#editor-support" aria-label="Permalink to &quot;Editor Support&quot;">​</a></h2><p>To improve productivity when working with PyBlade, <strong>PyBlade Intellisense</strong> offers editor support for popular editors, including <strong>VSCode, Sublime Text, and JetBrains Editors</strong>. These extensions provide:</p><ul><li><strong>Syntax Highlighting</strong> for <code>.pyblade</code> files.</li><li><strong>Intellisense and Code Completion</strong> for PyBlade directives and syntax.</li><li><strong>Snippets</strong> for commonly used template structures.</li><li><strong>Error Checking</strong> to catch syntax issues in <code>.pyblade</code> files.</li></ul><p>You can install <strong>PyBlade Intellisense</strong> extensions from your editor’s marketplace, enabling you to work seamlessly with PyBlade templates.</p><hr><h2 id="best-practices-and-tips" tabindex="-1">Best Practices and Tips <a class="header-anchor" href="#best-practices-and-tips" aria-label="Permalink to &quot;Best Practices and Tips&quot;">​</a></h2><p>Here are some best practices and tips to maximize efficiency and maintain clean code when using PyBlade:</p><ul><li><strong>Keep Logic in the Backend</strong>: Like Django’s templating philosophy, avoid adding business logic in templates. Use PyBlade directives to simplify rendering, but keep calculations, data processing, and complex logic in your views or controllers.</li><li><strong>Organize Templates by Feature</strong>: Create subdirectories within <code>templates</code> for different sections of your app. This structure keeps templates maintainable, especially in large applications.</li><li><strong>Use PyBlade’s Components for Modular Code</strong>: Components let you create reusable template sections, improving maintainability and reducing repetition across your templates.</li><li><strong>Editor Extensions</strong>: To speed up development, install PyBlade Intellisense for editor support, especially useful for <code>.pyblade</code> syntax, autocomplete, and debugging.</li></ul><p>These best practices will help you develop faster with PyBlade while maintaining code security, clarity, and efficiency across your Python web projects.</p><h2 id="what-s-next" tabindex="-1">What’s Next? <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What’s Next?&quot;">​</a></h2><p>Now that you&#39;ve successfully configured PyBlade for your Django or Flask project, you&#39;re ready to dive deeper into the core of PyBlade—its powerful directives and features. PyBlade isn’t just a template engine; it’s designed to streamline your workflow by offering a clean, expressive syntax that makes writing dynamic templates faster and more intuitive.</p><p>Here’s what you can explore next to unlock the full potential of PyBlade:</p><h4 id="_1-learn-the-pyblade-directives" tabindex="-1">1. <strong>Learn the PyBlade Directives</strong> <a class="header-anchor" href="#_1-learn-the-pyblade-directives" aria-label="Permalink to &quot;1. **Learn the PyBlade Directives**&quot;">​</a></h4><p>PyBlade provides a rich set of directives that can help you add logic and interactivity to your templates, all while keeping the code simple and readable. In the next section, we’ll cover how to use conditional statements (<code>@if</code>, <code>@else</code>, <code>@elif</code>, <code>@switch</code>), loops (<code>@for</code>, <code>@while</code>), and much more. These directives will allow you to control the flow of your templates in a way that’s both powerful and easy to follow.</p><h4 id="_2-explore-component-based-templates-with-liveblade" tabindex="-1">2. <strong>Explore Component-based Templates with LiveBlade</strong> <a class="header-anchor" href="#_2-explore-component-based-templates-with-liveblade" aria-label="Permalink to &quot;2. **Explore Component-based Templates with LiveBlade**&quot;">​</a></h4><p>With PyBlade’s LiveBlade integration, you can create reusable components that can be updated dynamically—without requiring server-side rendering. This is ideal for situations where you want to reduce the load on your server or make your frontend more interactive. You can start by learning how to create inline components and use the <code>@props</code> directive to pass data to components seamlessly.</p><h4 id="_3-boost-productivity-with-editor-extensions" tabindex="-1">3. <strong>Boost Productivity with Editor Extensions</strong> <a class="header-anchor" href="#_3-boost-productivity-with-editor-extensions" aria-label="Permalink to &quot;3. **Boost Productivity with Editor Extensions**&quot;">​</a></h4><p>PyBlade makes your development experience even better with editor extensions for popular IDEs like VSCode, Sublime Text, and JetBrains. These extensions bring intelligent code completion, snippets, syntax highlighting, and more to <code>.pyblade</code> files. This ensures you can write PyBlade templates with ease and confidence, reducing the time spent on looking up syntax and improving your overall workflow.</p><p>Once you have a good grasp of the basics, you’ll be able to fully leverage the power of PyBlade to create beautiful, dynamic templates that integrate seamlessly with your Django or Flask backend. So, get ready to explore the power of PyBlade’s directives, and start building more efficient and maintainable web applications today!</p>`,56)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
