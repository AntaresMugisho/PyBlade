import{_ as n,c as l,a0 as i,j as e,a,t as p,o}from"./chunks/framework.CGHvQLJz.js";const u=JSON.parse('{"title":"PyBlade: Template Engine","description":"","frontmatter":{},"headers":[],"relativePath":"4-template-engine.md","filePath":"4-template-engine.md"}'),h={name:"4-template-engine.md"};function d(t,s,r,k,c,E){return o(),l("div",null,[s[2]||(s[2]=i(`<h1 id="pyblade-template-engine" tabindex="-1">PyBlade: Template Engine <a class="header-anchor" href="#pyblade-template-engine" aria-label="Permalink to &quot;PyBlade: Template Engine&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>PyBlade is a lightweight yet powerful template engine tailored for Python web applications. Unlike some templating engines, PyBlade keeps things simple while staying flexible, allowing you to use familiar Python syntax and expressions directly in your templates. Each PyBlade template is compiled into HTML code and cached to ensure optimal performance, meaning PyBlade adds virtually no overhead to your application. PyBlade templates use the <code>.pyblade</code> file extension and are typically stored within the <code>templates</code> directory of your app.</p><p>In Django or Flask applications, PyBlade views can be rendered directly within views or controllers, keeping data handling and template rendering clean and straightforward. Just pass the data you need as context, and PyBlade takes care of the rest, providing a seamless, Pythonic approach to building dynamic, secure web templates.</p><h3 id="available-directives" tabindex="-1">Available Directives <a class="header-anchor" href="#available-directives" aria-label="Permalink to &quot;Available Directives&quot;">​</a></h3><ol><li><p><strong>Conditionals and Logic:</strong></p><ul><li><code>@if</code>, <code>@elif</code>, <code>@else</code>, <code>@endif</code></li><li><code>@switch</code>, <code>@case</code></li></ul></li><li><p><strong>Auth and Guest:</strong></p><ul><li><code>@auth</code>, <code>@endauth</code>, <code>@guest</code>, <code>@endguest</code></li></ul></li><li><p><strong>Loops with Loop Variables:</strong></p><ul><li><code>@for</code>, <code>@endfor</code>, <code>@while</code>, <code>@endwhile</code></li><li><code>@break</code>, <code>@continue</code></li></ul><p>PyBlade provides a <code>loop</code> variable with properties in <code>@foreach</code> and <code>@for</code> loops:</p><ul><li><code>loop.index</code>: Current iteration (1-based).</li><li><code>loop.index0</code>: Current iteration (0-based).</li><li><code>loop.remaining</code>: Remaining iterations.</li><li><code>loop.count</code>: Total number of iterations.</li><li><code>loop.first</code>: True if this is the first iteration.</li><li><code>loop.last</code>: True if this is the last iteration.</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@foreach items as item</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ item }} - Loop index: {{ loop.index }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @if loop.last</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;This is the last item.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endforeach</span></span></code></pre></div></li><li><p><strong>Form and Error Handling:</strong></p><ul><li><code>@csrf</code>, <code>@method</code></li><li><code>@error</code>: Checks if a form input has an error and sets a message variable within it.</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @csrf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @error(&#39;username&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @enderror</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>HTML Attributes:</strong></p><ul><li><code>@class</code>, <code>@checked</code>, <code>@selected</code>, <code>@active</code></li></ul></li><li><p><strong>Template Structure:</strong></p><ul><li><code>@extends</code>, <code>@include</code>, <code>@yield</code>, <code>@section</code>, <code>@endsection</code>, <code>@block</code></li></ul></li><li><p><strong>URLs and Assets:</strong></p><ul><li><code>@static</code>, <code>@url</code></li></ul></li><li><p><strong>Python Code Execution:</strong></p><ul><li><code>@python</code></li></ul></li></ol><hr><h3 id="variable-rendering-and-xss-prevention" tabindex="-1">Variable Rendering and XSS Prevention <a class="header-anchor" href="#variable-rendering-and-xss-prevention" aria-label="Permalink to &quot;Variable Rendering and XSS Prevention&quot;">​</a></h3>`,8)),e("p",null,[s[0]||(s[0]=a("To prevent XSS attacks, PyBlade automatically escapes all variables rendered using ")),e("code",null,p(t.variable),1),s[1]||(s[1]=a(" syntax. This ensures that any untrusted user input is sanitized, preventing potential JavaScript injection attacks."))]),s[3]||(s[3]=i(`<p>If you need to render a variable unescaped, you can use the <code>{!! variable !!}</code> syntax. <strong>Use this with caution</strong>, as it bypasses XSS protection and should only be used with trusted content.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ user.name }} - Escaped&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{!! user.raw_html !!} - Unescaped&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h3 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;Comments&quot;">​</a></h3><p>Use <code>{# ... #}</code> for comments within templates. Content inside these comment blocks will not appear in the final rendered HTML output.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{# This is a comment and will not be rendered #}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Visible Content&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><h2 id="_5-liveblade-for-components" tabindex="-1">5. LiveBlade for Components <a class="header-anchor" href="#_5-liveblade-for-components" aria-label="Permalink to &quot;5. LiveBlade for Components&quot;">​</a></h2><p>LiveBlade is PyBlade&#39;s component system, allowing developers to build reusable UI blocks with data and logic encapsulation.</p><h3 id="defining-a-component-class" tabindex="-1">Defining a Component Class <a class="header-anchor" href="#defining-a-component-class" aria-label="Permalink to &quot;Defining a Component Class&quot;">​</a></h3><ol><li><p><strong>Define the Component Class:</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># components/button.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, label):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label</span></span></code></pre></div></li><li><p><strong>Use the Component in Template:</strong></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@component(&#39;components.button&#39;, [&#39;label&#39; =&gt; &#39;Click Me&#39;])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@endcomponent</span></span></code></pre></div></li></ol><h3 id="inline-components" tabindex="-1">Inline Components <a class="header-anchor" href="#inline-components" aria-label="Permalink to &quot;Inline Components&quot;">​</a></h3><p>PyBlade supports inline components using a self-closing HTML-like syntax:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">b-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;Click Me&#39;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;submit&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><p>This syntax allows setting attributes directly, making components cleaner and easier to use in templates.</p><h3 id="props-directive-in-inline-components" tabindex="-1">Props Directive in Inline Components <a class="header-anchor" href="#props-directive-in-inline-components" aria-label="Permalink to &quot;Props Directive in Inline Components&quot;">​</a></h3><p>Within the component template, you can use the <code>@props</code> directive to define which props the component should receive:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- components/button.blade.pyblade --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@props([&#39;label&#39;, &#39;type&#39; =&gt; &#39;button&#39;])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ type }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{ label }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This structure ensures default values and improves readability for the data passed into the component.</p><hr>`,20))])}const y=n(h,[["render",d]]);export{u as __pageData,y as default};
