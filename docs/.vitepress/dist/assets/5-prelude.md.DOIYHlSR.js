import{_ as a,c as t,a0 as n,o as l}from"./chunks/framework.CGHvQLJz.js";const y=JSON.parse('{"title":"PyBlade: Template Engine","description":"","frontmatter":{},"headers":[],"relativePath":"5-prelude.md","filePath":"5-prelude.md"}'),i={name:"5-prelude.md"};function o(d,e,p,r,s,c){return l(),t("div",null,e[0]||(e[0]=[n('<h1 id="pyblade-template-engine" tabindex="-1">PyBlade: Template Engine <a class="header-anchor" href="#pyblade-template-engine" aria-label="Permalink to &quot;PyBlade: Template Engine&quot;">​</a></h1><h2 id="pyblade-as-a-template-engine" tabindex="-1">PyBlade as a template engine <a class="header-anchor" href="#pyblade-as-a-template-engine" aria-label="Permalink to &quot;PyBlade as a template engine&quot;">​</a></h2><p>PyBlade is a lightweight yet powerful template engine tailored for Python web applications.</p><p>Unlike some templating engines, PyBlade keeps things simple while staying flexible, allowing you to use familiar Python syntax and expressions directly in your templates.</p><p>Each PyBlade template is compiled into HTML code and cached to ensure optimal performance, meaning PyBlade adds virtually no overhead to your application.</p><p>PyBlade templates use the <code>.pyblade</code> file extension and are typically stored within the <code>templates</code> directory of your app.</p><p>In Django or Flask applications, PyBlade views can be rendered directly within views or controllers, keeping data handling and template rendering clean and straightforward.</p><p>Just pass the data you need as context, and PyBlade takes care of the rest, providing a seamless, Pythonic approach to building dynamic, secure web templates.</p><p>Check out the next section to learn more about <a href="/6-displaying-data.html">PyBlade Directives</a>.</p>',9)]))}const h=a(i,[["render",o]]);export{y as __pageData,h as default};
